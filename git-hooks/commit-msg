#!/usr/bin/env python

import sys

LINT_SUCCESSFUL_EXIT_CODE = 0
LINT_FAILED_EXIT_CODE = 1

MAX_SUBJECT_LINE_CHAR = 70
MIN_SUBJECT_LINE_CHAR = 10

TERMINAL_OUTPUT_HEADER_TEXT_COLOUR = "\033[0;32m"
TERMINAL_OUTPUT_FAILED_TEXT_COLOUR = "\033[1;31m"
TERMINAL_OUTPUT_DEFAULT_TEXT_COLOUR = "\033[0;0m"


# Get the commit message file path
commit_msg_filepath = sys.argv[1]

# List of commit message all_commit_lint_errors
all_commit_lint_errors = list()


def is_first_letter_uppercase(line_text):
    return line_text.split(' ')[0][0].isupper()

def does_line_end_with_period(line_text):
    return line_text.strip()[-1] == '.'

def does_line_have_more_than_one_word(line_text):
    return len(line_text.split(' ')) > 1


def lint_commit_message(line_num, line_text):
    """
    Check if given line_text passes a set of rules based on the number of the line_text.

    Return list of all_commit_lint_errors to be printed.
    """
    # Since enumerate starts at 0
    actual_line_num = line_num + 1

    all_commit_lint_errors = list()
    # Subject line_text in commit message
    if line_num == 0:
        if len(line_text) > MAX_SUBJECT_LINE_CHAR:
            all_commit_lint_errors.append("Error (line %d): Subject line should be less than %d characters in length.\n" % (actual_line_num, MAX_SUBJECT_LINE_CHAR))
        if len(line_text) < MIN_SUBJECT_LINE_CHAR:
            all_commit_lint_errors.append("Error (line %d): Subject line should be greater than %d characters in length.\n" % (actual_line_num, MIN_SUBJECT_LINE_CHAR))
        if does_line_end_with_period(line_text):
            all_commit_lint_errors.append("Error (line %d): Subject line should not end with a period.\n" % (actual_line_num))
        if not is_first_letter_uppercase(line_text):
            all_commit_lint_errors.append("Error (line %d): First word of subject lines should be in uppercased.\n" % (actual_line_num))
        if not does_line_have_more_than_one_word(line_text):
            all_commit_lint_errors.append("Error (line %d): Subject line should have more than one word.\n" % (actual_line_num))
    # Second line_text in commit message
    if line_num == 1 and not line_text.startswith('#'):
        if line_text:
            all_commit_lint_errors.append("Error (line %d): Second line should be empty.\n" % (actual_line_num))
    # Third line_text in commit message
    if line_num == 2 and not line_text.startswith('#'):
        if not does_line_have_more_than_one_word(line_text):
            all_commit_lint_errors.append("Error: (line %d): Body should have more than one word.\n" % (actual_line_num))

    return all_commit_lint_errors

# Read commit message line_text by line_text and check if line_text follows the rules
with open(commit_msg_filepath, 'r') as f:
    content = f.readlines()
    for line_num, line_text in enumerate(content):
        line_lint_error = lint_commit_message(line_num, line_text.strip())
        if line_lint_error:
            all_commit_lint_errors += line_lint_error
    if all_commit_lint_errors:
        sys.stderr.write(TERMINAL_OUTPUT_FAILED_TEXT_COLOUR)
        sys.stderr.write("========== COMMIT MESSAGE ERRORS ==========\n\n")
        for error in all_commit_lint_errors:
            sys.stderr.write(error)
        sys.stderr.write("\n===========================================")
        sys.exit(LINT_FAILED_EXIT_CODE)
    else:
        sys.stdout.write(TERMINAL_OUTPUT_HEADER_TEXT_COLOUR)
        print("========== COMMIT MESSAGE LINTING PASSED ==========\n")
        print("Adding commit to history.\n")
        print("===================================================")
        sys.exit(LINT_SUCCESSFUL_EXIT_CODE)
